package main

import (
	_ "github.com/ariexx/go-swagger/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/ariexx/go-swagger/response"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
	"time"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:3000
// @BasePath /api
func main() {
	app := fiber.New(fiber.Config{
		EnablePrintRoutes: true,
	})

	app.Get("docs/swagger/*", swagger.HandlerDefault)

	g := app.Group("/api")
	{

		g.Get("/health", HandleHealth)

		g.Get("/error", HandleError)

		g.Get("/fail", HandleFail)

		g.Get("/success", HandleSuccess)

		g.Get("/interface", HandleInterface)
	}

	if err := app.Listen(":3000"); err != nil {
		panic(err)
	}
}

// HandleFail
// @Tags Response
// @Summary Fail
// @Description Fail
// @Accept json
// @Produce json
// @Success 400 {object} response.ResponseFail
// @Router /fail [get]
func HandleFail(c *fiber.Ctx) error {
	return c.Status(fiber.StatusBadRequest).JSON(response.ApiResponseFail(false, "400"))
}

func HandleError(c *fiber.Ctx) error {
	return c.Status(fiber.StatusBadRequest).JSON(response.ApiResponseError("error", "400"))
}

// HandleSuccess
// @Tags Response
// @Summary Success
// @Description Success
// @Accept json
// @Produce json
// @Success 200 {object} response.ResponseJsonSuccess
// @Router /success [get]
func HandleSuccess(c *fiber.Ctx) error {
	newResponse := response.ProductResponse{
		ID:    1,
		Name:  "Ayam",
		Price: 1,
	}
	return c.Status(fiber.StatusOK).JSON(response.ApiResponseSuccess("success", newResponse))
}

// HandleHealth
// @Tags Response
// @Summary Health
// @Description Health
// @Accept json
// @Produce json
// @Success 200 {object} response.EmptyObject
// @Router /health [get]
func HandleHealth(c *fiber.Ctx) error {
	return c.Status(fiber.StatusOK).JSON(response.ApiResponseSuccess("success", "pong"))
}

// HandleInterface
// @Tags Response
// @Summary Interface
// @Description Interface
// @Accept json
// @Produce json
// @Success 200 {object} response.ProductResponse
// @Failure 400 {object} response.ResponseFail{data_fail=string} "Return error message"
// @Router /interface [get]
func HandleInterface(c *fiber.Ctx) error {
	var data any
	timeNow := time.Now().UTC().Second() % 2
	if timeNow == 0 {
		data = response.ProductResponse{
			ID:    1,
			Name:  "Ayam",
			Price: 1,
		}
	} else {
		data = response.EmptyObject{}
	}

	switch data.(type) {
	case response.ProductResponse:
		return c.Status(fiber.StatusOK).JSON(response.ApiResponseSuccess("success", data))
	default:
		return c.Status(fiber.StatusBadRequest).JSON(response.ApiResponseFail("Error while sending request", "400"))
	}
}
